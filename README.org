* Allowance
  Pays out (actually, authorizes withdrawals) to a designated party at
  a predetermined rate starting at a predetermined time.
** Notes
   - Allow owner and/or [[*Arbitrator][certain users]] to trigger a burn or cash out
   - Allow burn/cashout to be triggered by external circumstances
   - DON'T allow additional parties to contribute to allowance
     reserve to keep the contract as minimal as possible.  Other
     parties can just create new contracts.  Perhaps a contract
     broker could manage them as collections for coordinating
     burn/cashout, as well as staging start times and managing rates
     to ensure a certain collective rate.
   - ERC20 allowances?  A big problem with MinimalAllowance is that
     ether is volatile.  Tokens allow using a stable/pegged monetary
     value.
*** Burn
    Transfer remaining funds to an address specified at contract
    creation; typically to a third-party address or the burn address.
    "Remaning" is interpreted to mean the value excluding that which
    could presently be withdrawn.  This difference is considered
    already owed and is sent to the payee address.
** Minimal Allowance
   Pays out over time from contract's creation value.  Does not
   accept additional funds.
*** Data and views
    - address owner: can burn the contract
    - address payee: receives payments
    - uint rate: Wei per second the contract pays out
    - int commences: (now - commences) * rate equals the max
      cumulative withdrawal
    - uint paid: cumulative total of previous payments
    - int completes(): commences+((withdrawn+value) / rate) which
      should be constant
*** methods
    - MinimalAllowance(payee, rate, commences): should be created
      with ether value.  There is no other way to fund the contract.
    - afterCommencing payPayee(): transfer all currently-owed
      ether to payee.  If this payment reduces contract's value
      to zero, selfdestruct the contract.
    - onlyOwner burn(): call payPayee() then selfdestruct,
      transfering ether to this contract's address.
** Extendable
   The contract accepts payment anytime after creation, extending the
   length of the allowance, perhaps by third parties.
** Cashout version
   Owner can cashout the contract to the payee at any time.
   This isn't in the basic version because a person might wish to
   create their own allowance contract and solicit people to send
   funds to it.  A use case would be to offer to perform a service
   for a community.  But then the community does not have the option
   to burn, so this whole idea needs some thought.
*** methods
    - onlyOwner cashout(): transfer all remaining ether to payee
      and terminate contract
** burnAddress version
   Owner can set a burn address at contract creation time.  This will
   receive "burnt" ether, rather than actually destroying it.
*** Data
    - address burnAddress
*** methods
    - onlyOwner burn(): call payPayee() then selfdestruct,
      transfering ether to burnaddress
** controlled payout version
   Only owner can call payPayee()
* Dev notes
** Bookmark
The absolute most-simple version of this contract I can see now passes
its very basic tests.  I'm interested in extending it to more
sophisticated versions, as well as providing a UI.
** Emacs environment
   The configuration for my devlopment environment.
#+BEGIN_SRC emacs-lisp
  (progn
    (setenv "PYTHONWARNINGS" "ignore:::cffi.model:532")
    (global-whitespace-mode t)
    (define-key global-map (kbd "C-c c")
      (lambda () "Run unit tests"
	(interactive)
	(compile "cd /home/desktop/eth/allowance/ && populus compile && py.test --disable-warnings")))
    'READY)
#+END_SRC
